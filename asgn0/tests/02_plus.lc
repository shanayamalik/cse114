-------------------------------------------------------------------------------
-- DO NOT MODIFY THIS SEGMENT
-------------------------------------------------------------------------------

let ZERO  = \f x -> x
let ONE   = \f x -> f x
let TWO   = \f x -> f (f x)
let THREE = \f x -> f (f (f x))
let FOUR  = \f x -> f (f (f (f x)))

let SUC   = \n f x -> f (n f x)
let ADD   = \n m -> n SUC m
let MUL   = \n m -> n (ADD m) ZERO


-------------------------------------------------------------------------------
-- YOU SHOULD ONLY MODIFY THE TEXT BELOW, JUST THE PARTS MARKED AS COMMENTS
-------------------------------------------------------------------------------
eval suc_one :
  SUC ONE
  =d> (\n f x -> f (n f x)) ONE                 -- Expand SUC
  =b> \f x -> f (ONE f x)                       -- Apply ONE to n
  =d> \f x -> f ((\f x -> f x) f x)             -- Expand ONE
  =b> \f x -> f ((\x -> f x) x)                 -- Apply first f
  =b> \f x -> f (f x)                           -- Apply x
  =d> TWO                                       -- Recognize TWO

eval add_one_zero :
  ADD ONE ZERO
  =d> (\n m -> n SUC m) ONE ZERO               -- Expand ADD
  =b> (\m -> ONE SUC m) ZERO                   -- Apply ONE to n
  =b> ONE SUC ZERO                             -- Apply ZERO to m
  =d> (\f x -> f x) SUC ZERO                   -- Expand ONE
  =b> (\x -> SUC x) ZERO                       -- Apply SUC to f
  =b> SUC ZERO                                 -- Apply ZERO to x
  =d> (\n f x -> f (n f x)) ZERO              -- Expand SUC
  =b> \f x -> f (ZERO f x)                     -- Apply ZERO to n
  =d> \f x -> f ((\f x -> x) f x)              -- Expand ZERO
  =b> \f x -> f ((\x -> x) x)                  -- Apply f  
  =b> \f x -> f x                              -- Apply x
  =d> ONE                                      -- Recognize ONE

eval add_one_two :
  ADD ONE TWO 
  -- (c) fill in your reductions here
  =d> THREE
